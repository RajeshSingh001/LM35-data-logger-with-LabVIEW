
LM35_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000544  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000544  000005b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000080  00000000  00000000  000005da  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000011b  00000000  00000000  0000065a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000ba5  00000000  00000000  00000775  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004d3  00000000  00000000  0000131a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000088e  00000000  00000000  000017ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  0000207c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ea  00000000  00000000  000021ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004ee  00000000  00000000  00002396  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f0  00000000  00000000  00002884  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  7a:	0c 94 a0 02 	jmp	0x540	; 0x540 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <delay>:
#include"lcd.h"
#include"string.h"
#include<stdlib.h>

void delay(uint16_t count)
{
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  86:	4a ef       	ldi	r20, 0xFA	; 250
  88:	50 e0       	ldi	r21, 0x00	; 0
  8a:	05 c0       	rjmp	.+10     	; 0x96 <delay+0x14>
  8c:	fa 01       	movw	r30, r20
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <delay+0xc>
	uint16_t i;
	for(i=0;i<count;i++)
  92:	2f 5f       	subi	r18, 0xFF	; 255
  94:	3f 4f       	sbci	r19, 0xFF	; 255
  96:	28 17       	cp	r18, r24
  98:	39 07       	cpc	r19, r25
  9a:	c0 f3       	brcs	.-16     	; 0x8c <delay+0xa>
	_delay_ms(1);
}
  9c:	08 95       	ret

0000009e <main>:
void main()
{
  9e:	cf 92       	push	r12
  a0:	df 92       	push	r13
  a2:	ef 92       	push	r14
  a4:	ff 92       	push	r15
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	df 93       	push	r29
  ac:	cf 93       	push	r28
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	2a 97       	sbiw	r28, 0x0a	; 10
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	f8 94       	cli
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	cd bf       	out	0x3d, r28	; 61
	uint16_t adc_val,adc_val1;
	uint8_t FSR1;
	InitLCD(0);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 32 01 	call	0x264	; 0x264 <InitLCD>
	USARTInit(51);
  c4:	83 e3       	ldi	r24, 0x33	; 51
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <USARTInit>
	InitADC();
  cc:	0e 94 cc 00 	call	0x198	; 0x198 <InitADC>
	LCDClear();
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
	LCDWriteString("Temperature");
  dc:	80 e6       	ldi	r24, 0x60	; 96
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDWriteString>
	LCDWriteStringXY(0,1,"Monitoring Node");
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	0e 94 c9 01 	call	0x392	; 0x392 <LCDGotoXY>
  ec:	8c e6       	ldi	r24, 0x6C	; 108
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDWriteString>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	2a ef       	ldi	r18, 0xFA	; 250
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	f9 01       	movw	r30, r18
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x60>
#include<stdlib.h>

void delay(uint16_t count)
{
	uint16_t i;
	for(i=0;i<count;i++)
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	84 31       	cpi	r24, 0x14	; 20
 106:	91 05       	cpc	r25, r1
 108:	c9 f7       	brne	.-14     	; 0xfc <main+0x5e>
	LCDWriteString("Temperature");
	LCDWriteStringXY(0,1,"Monitoring Node");
	char arr[10];
	delay(20);

	LCDClear();
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
	LCDWriteString("Temperature");
 116:	80 e6       	ldi	r24, 0x60	; 96
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDWriteString>
 11e:	9a ef       	ldi	r25, 0xFA	; 250
 120:	c9 2e       	mov	r12, r25
 122:	d1 2c       	mov	r13, r1
	{
		adc_val=ReadADC(0);
        FSR1=adc_val/2;
		delay(100);
      	write("FSR1:");
		itoa(FSR1,arr,10);
 124:	7e 01       	movw	r14, r28
 126:	08 94       	sec
 128:	e1 1c       	adc	r14, r1
 12a:	f1 1c       	adc	r15, r1

	LCDClear();
	LCDWriteString("Temperature");
	while(1)
	{
		adc_val=ReadADC(0);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <ReadADC>
 134:	8c 01       	movw	r16, r24
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	f6 01       	movw	r30, r12
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x9e>
#include<stdlib.h>

void delay(uint16_t count)
{
	uint16_t i;
	for(i=0;i<count;i++)
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	84 36       	cpi	r24, 0x64	; 100
 144:	91 05       	cpc	r25, r1
 146:	c9 f7       	brne	.-14     	; 0x13a <main+0x9c>
	while(1)
	{
		adc_val=ReadADC(0);
        FSR1=adc_val/2;
		delay(100);
      	write("FSR1:");
 148:	8c e7       	ldi	r24, 0x7C	; 124
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 3e 02 	call	0x47c	; 0x47c <write>
		itoa(FSR1,arr,10);
 150:	16 95       	lsr	r17
 152:	07 95       	ror	r16
 154:	80 2f       	mov	r24, r16
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	b7 01       	movw	r22, r14
 15a:	4a e0       	ldi	r20, 0x0A	; 10
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	0e 94 6f 02 	call	0x4de	; 0x4de <itoa>
		write(arr);
 162:	c7 01       	movw	r24, r14
 164:	0e 94 3e 02 	call	0x47c	; 0x47c <write>
		USARTWriteChar('\n');
 168:	8a e0       	ldi	r24, 0x0A	; 10
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <USARTWriteChar>
		

	   
		//write(FSR1);
		//FSR1=adc_val/2;
		LCDWriteIntXY(0,1,FSR1,3);
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	0e 94 c9 01 	call	0x392	; 0x392 <LCDGotoXY>
 178:	80 2f       	mov	r24, r16
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	63 e0       	ldi	r22, 0x03	; 3
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCDWriteInt>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	f6 01       	movw	r30, r12
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xec>
#include<stdlib.h>

void delay(uint16_t count)
{
	uint16_t i;
	for(i=0;i<count;i++)
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	84 36       	cpi	r24, 0x64	; 100
 192:	91 05       	cpc	r25, r1
 194:	c9 f7       	brne	.-14     	; 0x188 <main+0xea>
 196:	ca cf       	rjmp	.-108    	; 0x12c <main+0x8e>

00000198 <InitADC>:
#include<avr/io.h>

void InitADC()
{
ADMUX=(1<<REFS0);// For Aref=AVcc;
 198:	80 e4       	ldi	r24, 0x40	; 64
 19a:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(7<<ADPS0);
 19c:	87 e8       	ldi	r24, 0x87	; 135
 19e:	86 b9       	out	0x06, r24	; 6
}
 1a0:	08 95       	ret

000001a2 <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ADMUX&=0xf8;
 1a2:	97 b1       	in	r25, 0x07	; 7
 1a4:	98 7f       	andi	r25, 0xF8	; 248
 1a6:	97 b9       	out	0x07, r25	; 7
	ch=ch&0b00000111;
	ADMUX|=ch;
 1a8:	97 b1       	in	r25, 0x07	; 7
 1aa:	87 70       	andi	r24, 0x07	; 7
 1ac:	89 2b       	or	r24, r25
 1ae:	87 b9       	out	0x07, r24	; 7
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
 1b0:	36 9a       	sbi	0x06, 6	; 6

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
 1b2:	34 9b       	sbis	0x06, 4	; 6
 1b4:	fe cf       	rjmp	.-4      	; 0x1b2 <ReadADC+0x10>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
 1b6:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
 1b8:	24 b1       	in	r18, 0x04	; 4
 1ba:	35 b1       	in	r19, 0x05	; 5
}
 1bc:	c9 01       	movw	r24, r18
 1be:	08 95       	ret

000001c0 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 1c0:	84 b3       	in	r24, 0x14	; 20
 1c2:	80 7f       	andi	r24, 0xF0	; 240
 1c4:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
 1c6:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
 1c8:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	8a 95       	dec	r24
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	97 9a       	sbi	0x12, 7	; 18
 1d4:	82 2f       	mov	r24, r18
 1d6:	8a 95       	dec	r24
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 1da:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
 1dc:	82 95       	swap	r24
 1de:	80 7f       	andi	r24, 0xF0	; 240
 1e0:	92 2f       	mov	r25, r18
 1e2:	9a 95       	dec	r25
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 1e6:	97 98       	cbi	0x12, 7	; 18
 1e8:	92 2f       	mov	r25, r18
 1ea:	9a 95       	dec	r25
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 1ee:	97 9a       	sbi	0x12, 7	; 18
 1f0:	92 2f       	mov	r25, r18
 1f2:	9a 95       	dec	r25
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 1f6:	93 b3       	in	r25, 0x13	; 19
 1f8:	92 2f       	mov	r25, r18
 1fa:	9a 95       	dec	r25
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 1fe:	97 98       	cbi	0x12, 7	; 18
 200:	92 2f       	mov	r25, r18
 202:	9a 95       	dec	r25
 204:	f1 f7       	brne	.-4      	; 0x202 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 206:	87 fd       	sbrc	r24, 7
 208:	e4 cf       	rjmp	.-56     	; 0x1d2 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 20a:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 20c:	84 b3       	in	r24, 0x14	; 20
 20e:	8f 60       	ori	r24, 0x0F	; 15
 210:	84 bb       	out	0x14, r24	; 20

}
 212:	08 95       	ret

00000214 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 214:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 216:	66 23       	and	r22, r22
 218:	11 f4       	brne	.+4      	; 0x21e <LCDByte+0xa>
	CLEAR_RS();
 21a:	96 98       	cbi	0x12, 6	; 18
 21c:	01 c0       	rjmp	.+2      	; 0x220 <LCDByte+0xc>
else
	SET_RS();
 21e:	96 9a       	sbi	0x12, 6	; 18
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	82 2f       	mov	r24, r18
 224:	8a 95       	dec	r24
 226:	f1 f7       	brne	.-4      	; 0x224 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 228:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 22a:	85 b3       	in	r24, 0x15	; 21
 22c:	93 2f       	mov	r25, r19
 22e:	92 95       	swap	r25
 230:	9f 70       	andi	r25, 0x0F	; 15
 232:	80 7f       	andi	r24, 0xF0	; 240
 234:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 236:	95 bb       	out	0x15, r25	; 21
 238:	82 2f       	mov	r24, r18
 23a:	8a 95       	dec	r24
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 23e:	97 98       	cbi	0x12, 7	; 18
 240:	82 2f       	mov	r24, r18
 242:	8a 95       	dec	r24
 244:	f1 f7       	brne	.-4      	; 0x242 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 246:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 248:	85 b3       	in	r24, 0x15	; 21
 24a:	3f 70       	andi	r19, 0x0F	; 15
 24c:	80 7f       	andi	r24, 0xF0	; 240
 24e:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 250:	85 bb       	out	0x15, r24	; 21
 252:	82 2f       	mov	r24, r18
 254:	8a 95       	dec	r24
 256:	f1 f7       	brne	.-4      	; 0x254 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 258:	97 98       	cbi	0x12, 7	; 18
 25a:	2a 95       	dec	r18
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 25e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCDBusyLoop>
}
 262:	08 95       	ret

00000264 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 264:	1f 93       	push	r17
 266:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 268:	8c e4       	ldi	r24, 0x4C	; 76
 26a:	9d e1       	ldi	r25, 0x1D	; 29
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 270:	84 b3       	in	r24, 0x14	; 20
 272:	8f 60       	ori	r24, 0x0F	; 15
 274:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 276:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 278:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 27a:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 27c:	85 b3       	in	r24, 0x15	; 21
 27e:	80 7f       	andi	r24, 0xF0	; 240
 280:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 282:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 284:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 286:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	98 2f       	mov	r25, r24
 28c:	9a 95       	dec	r25
 28e:	f1 f7       	brne	.-4      	; 0x28c <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 290:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 292:	a9 9a       	sbi	0x15, 1	; 21
 294:	98 2f       	mov	r25, r24
 296:	9a 95       	dec	r25
 298:	f1 f7       	brne	.-4      	; 0x296 <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 29a:	97 98       	cbi	0x12, 7	; 18
 29c:	8a 95       	dec	r24
 29e:	f1 f7       	brne	.-4      	; 0x29c <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 2a0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 2a4:	81 2f       	mov	r24, r17
 2a6:	8c 60       	ori	r24, 0x0C	; 12
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 2ae:	88 e2       	ldi	r24, 0x28	; 40
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
}
 2b6:	1f 91       	pop	r17
 2b8:	08 95       	ret

000002ba <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	ec 01       	movw	r28, r24
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
	msg++;
 2c8:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 2ca:	88 81       	ld	r24, Y
 2cc:	88 23       	and	r24, r24
 2ce:	c9 f7       	brne	.-14     	; 0x2c2 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 2d6:	ef 92       	push	r14
 2d8:	ff 92       	push	r15
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
 2de:	df 93       	push	r29
 2e0:	cf 93       	push	r28
 2e2:	00 d0       	rcall	.+0      	; 0x2e4 <LCDWriteInt+0xe>
 2e4:	00 d0       	rcall	.+0      	; 0x2e6 <LCDWriteInt+0x10>
 2e6:	0f 92       	push	r0
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	9c 01       	movw	r18, r24
 2ee:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2f0:	fe 01       	movw	r30, r28
 2f2:	31 96       	adiw	r30, 0x01	; 1
 2f4:	85 e0       	ldi	r24, 0x05	; 5
 2f6:	df 01       	movw	r26, r30
 2f8:	1d 92       	st	X+, r1
 2fa:	8a 95       	dec	r24
 2fc:	e9 f7       	brne	.-6      	; 0x2f8 <LCDWriteInt+0x22>
 2fe:	fe 01       	movw	r30, r28
 300:	35 96       	adiw	r30, 0x05	; 5
 302:	0d c0       	rjmp	.+26     	; 0x31e <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 304:	c9 01       	movw	r24, r18
 306:	6a e0       	ldi	r22, 0x0A	; 10
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	0e 94 48 02 	call	0x490	; 0x490 <__divmodhi4>
 30e:	80 83       	st	Z, r24
	val=val/10;
 310:	c9 01       	movw	r24, r18
 312:	6a e0       	ldi	r22, 0x0A	; 10
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	0e 94 48 02 	call	0x490	; 0x490 <__divmodhi4>
 31a:	9b 01       	movw	r18, r22
 31c:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 31e:	21 15       	cp	r18, r1
 320:	31 05       	cpc	r19, r1
 322:	81 f7       	brne	.-32     	; 0x304 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 324:	bf ef       	ldi	r27, 0xFF	; 255
 326:	0f 3f       	cpi	r16, 0xFF	; 255
 328:	1b 07       	cpc	r17, r27
 32a:	79 f4       	brne	.+30     	; 0x34a <LCDWriteInt+0x74>
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 330:	ae 01       	movw	r20, r28
 332:	4f 5f       	subi	r20, 0xFF	; 255
 334:	5f 4f       	sbci	r21, 0xFF	; 255
 336:	02 c0       	rjmp	.+4      	; 0x33c <LCDWriteInt+0x66>
 338:	2f 5f       	subi	r18, 0xFF	; 255
 33a:	3f 4f       	sbci	r19, 0xFF	; 255
 33c:	fa 01       	movw	r30, r20
 33e:	e2 0f       	add	r30, r18
 340:	f3 1f       	adc	r31, r19
 342:	80 81       	ld	r24, Z
 344:	88 23       	and	r24, r24
 346:	c1 f3       	breq	.-16     	; 0x338 <LCDWriteInt+0x62>
 348:	04 c0       	rjmp	.+8      	; 0x352 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 34a:	25 e0       	ldi	r18, 0x05	; 5
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	20 1b       	sub	r18, r16
 350:	31 0b       	sbc	r19, r17
 352:	7e 01       	movw	r14, r28
 354:	08 94       	sec
 356:	e1 1c       	adc	r14, r1
 358:	f1 1c       	adc	r15, r1
 35a:	e2 0e       	add	r14, r18
 35c:	f3 1e       	adc	r15, r19
 35e:	89 01       	movw	r16, r18
 360:	09 c0       	rjmp	.+18     	; 0x374 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 362:	f7 01       	movw	r30, r14
 364:	81 91       	ld	r24, Z+
 366:	7f 01       	movw	r14, r30
 368:	80 5d       	subi	r24, 0xD0	; 208
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 370:	0f 5f       	subi	r16, 0xFF	; 255
 372:	1f 4f       	sbci	r17, 0xFF	; 255
 374:	05 30       	cpi	r16, 0x05	; 5
 376:	11 05       	cpc	r17, r1
 378:	a4 f3       	brlt	.-24     	; 0x362 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	cf 91       	pop	r28
 386:	df 91       	pop	r29
 388:	1f 91       	pop	r17
 38a:	0f 91       	pop	r16
 38c:	ff 90       	pop	r15
 38e:	ef 90       	pop	r14
 390:	08 95       	ret

00000392 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 392:	88 32       	cpi	r24, 0x28	; 40
 394:	30 f4       	brcc	.+12     	; 0x3a2 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 396:	61 11       	cpse	r22, r1
 398:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 39a:	80 68       	ori	r24, 0x80	; 128
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
 3a2:	08 95       	ret

000003a4 <USARTInit>:
void USARTInit(uint16_t ubrr_value)
{

   //Set Baud rate

   UBRRL = ubrr_value;
 3a4:	89 b9       	out	0x09, r24	; 9
   UBRRH = (ubrr_value>>8);
 3a6:	90 bd       	out	0x20, r25	; 32

   >> char size 8

   */

   UCSRC=(1<<URSEL)|(3<<UCSZ0);
 3a8:	86 e8       	ldi	r24, 0x86	; 134
 3aa:	80 bd       	out	0x20, r24	; 32


   //Enable The receiver and transmitter

   UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE);
 3ac:	88 ed       	ldi	r24, 0xD8	; 216
 3ae:	8a b9       	out	0x0a, r24	; 10


}
 3b0:	08 95       	ret

000003b2 <USARTReadChar>:
//available.
char USARTReadChar()
{
   //Wait untill a data is available

   while(!(UCSRA & (1<<RXC)))
 3b2:	5f 9b       	sbis	0x0b, 7	; 11
 3b4:	fe cf       	rjmp	.-4      	; 0x3b2 <USARTReadChar>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR;
 3b6:	8c b1       	in	r24, 0x0c	; 12
}
 3b8:	08 95       	ret

000003ba <USARTWriteChar>:
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 3ba:	5d 9b       	sbis	0x0b, 5	; 11
 3bc:	fe cf       	rjmp	.-4      	; 0x3ba <USARTWriteChar>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 3be:	8c b9       	out	0x0c, r24	; 12
}
 3c0:	08 95       	ret

000003c2 <USARTWriteInt>:



void USARTWriteInt(int val,unsigned int field_length)
{
 3c2:	0f 93       	push	r16
 3c4:	1f 93       	push	r17
 3c6:	df 93       	push	r29
 3c8:	cf 93       	push	r28
 3ca:	00 d0       	rcall	.+0      	; 0x3cc <USARTWriteInt+0xa>
 3cc:	00 d0       	rcall	.+0      	; 0x3ce <USARTWriteInt+0xc>
 3ce:	0f 92       	push	r0
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62
 3d4:	9c 01       	movw	r18, r24
 3d6:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 3d8:	fe 01       	movw	r30, r28
 3da:	31 96       	adiw	r30, 0x01	; 1
 3dc:	85 e0       	ldi	r24, 0x05	; 5
 3de:	df 01       	movw	r26, r30
 3e0:	1d 92       	st	X+, r1
 3e2:	8a 95       	dec	r24
 3e4:	e9 f7       	brne	.-6      	; 0x3e0 <USARTWriteInt+0x1e>
 3e6:	fe 01       	movw	r30, r28
 3e8:	35 96       	adiw	r30, 0x05	; 5
 3ea:	0d c0       	rjmp	.+26     	; 0x406 <USARTWriteInt+0x44>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 3ec:	c9 01       	movw	r24, r18
 3ee:	6a e0       	ldi	r22, 0x0A	; 10
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	0e 94 48 02 	call	0x490	; 0x490 <__divmodhi4>
 3f6:	80 83       	st	Z, r24
	val=val/10;
 3f8:	c9 01       	movw	r24, r18
 3fa:	6a e0       	ldi	r22, 0x0A	; 10
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	0e 94 48 02 	call	0x490	; 0x490 <__divmodhi4>
 402:	9b 01       	movw	r18, r22
 404:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 406:	21 15       	cp	r18, r1
 408:	31 05       	cpc	r19, r1
 40a:	81 f7       	brne	.-32     	; 0x3ec <USARTWriteInt+0x2a>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 40c:	bf ef       	ldi	r27, 0xFF	; 255
 40e:	0f 3f       	cpi	r16, 0xFF	; 255
 410:	1b 07       	cpc	r17, r27
 412:	71 f4       	brne	.+28     	; 0x430 <USARTWriteInt+0x6e>
 414:	a0 e0       	ldi	r26, 0x00	; 0
 416:	b0 e0       	ldi	r27, 0x00	; 0
		while(str[j]==0) j++;
 418:	9e 01       	movw	r18, r28
 41a:	2f 5f       	subi	r18, 0xFF	; 255
 41c:	3f 4f       	sbci	r19, 0xFF	; 255
 41e:	01 c0       	rjmp	.+2      	; 0x422 <USARTWriteInt+0x60>
 420:	11 96       	adiw	r26, 0x01	; 1
 422:	f9 01       	movw	r30, r18
 424:	ea 0f       	add	r30, r26
 426:	fb 1f       	adc	r31, r27
 428:	80 81       	ld	r24, Z
 42a:	88 23       	and	r24, r24
 42c:	c9 f3       	breq	.-14     	; 0x420 <USARTWriteInt+0x5e>
 42e:	04 c0       	rjmp	.+8      	; 0x438 <USARTWriteInt+0x76>
	else
		j=5-field_length;
 430:	a5 e0       	ldi	r26, 0x05	; 5
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	a0 1b       	sub	r26, r16
 436:	b1 0b       	sbc	r27, r17

	if(val<0) USARTWriteChar('-');
	for(i=j;i<5;i++)
 438:	a5 30       	cpi	r26, 0x05	; 5
 43a:	b1 05       	cpc	r27, r1
 43c:	ac f4       	brge	.+42     	; 0x468 <__stack+0x9>
	{
	USARTWriteChar(48+str[i]);
 43e:	ac 0f       	add	r26, r28
 440:	bd 1f       	adc	r27, r29
 442:	11 96       	adiw	r26, 0x01	; 1
 444:	8c 91       	ld	r24, X
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 446:	5d 9b       	sbis	0x0b, 5	; 11
 448:	fe cf       	rjmp	.-4      	; 0x446 <USARTWriteInt+0x84>
		j=5-field_length;

	if(val<0) USARTWriteChar('-');
	for(i=j;i<5;i++)
	{
	USARTWriteChar(48+str[i]);
 44a:	80 5d       	subi	r24, 0xD0	; 208
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 44c:	8c b9       	out	0x0c, r24	; 12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 44e:	84 ec       	ldi	r24, 0xC4	; 196
 450:	99 e0       	ldi	r25, 0x09	; 9
 452:	fc 01       	movw	r30, r24
 454:	31 97       	sbiw	r30, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <USARTWriteInt+0x92>
 458:	fc 01       	movw	r30, r24
 45a:	31 97       	sbiw	r30, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <USARTWriteInt+0x98>
 45e:	fc 01       	movw	r30, r24
 460:	31 97       	sbiw	r30, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <__stack+0x1>
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <__stack+0x5>
	//USARTWriteChar(48+str[i]);
	for(i=0;i<4;i++)
	{
	_delay_ms(10);
	}
}}
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	cf 91       	pop	r28
 474:	df 91       	pop	r29
 476:	1f 91       	pop	r17
 478:	0f 91       	pop	r16
 47a:	08 95       	ret

0000047c <write>:

void write(char *data)
{
 47c:	fc 01       	movw	r30, r24
 47e:	04 c0       	rjmp	.+8      	; 0x488 <write+0xc>
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 480:	5d 9b       	sbis	0x0b, 5	; 11
 482:	fe cf       	rjmp	.-4      	; 0x480 <write+0x4>
{
	//USARTWriteChar('#');
	//USARTWriteChar(3);
	//USARTWriteChar(1);
	while(*data)
	USARTWriteChar(*data++);
 484:	31 96       	adiw	r30, 0x01	; 1
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 486:	8c b9       	out	0x0c, r24	; 12
void write(char *data)
{
	//USARTWriteChar('#');
	//USARTWriteChar(3);
	//USARTWriteChar(1);
	while(*data)
 488:	80 81       	ld	r24, Z
 48a:	88 23       	and	r24, r24
 48c:	c9 f7       	brne	.-14     	; 0x480 <write+0x4>
	USARTWriteChar(*data++);
	//USARTWriteChar('\n');
	//USARTWriteInt(data,2);
	//while(*data) USARTWriteChar(*data++);
}
 48e:	08 95       	ret

00000490 <__divmodhi4>:
 490:	97 fb       	bst	r25, 7
 492:	09 2e       	mov	r0, r25
 494:	07 26       	eor	r0, r23
 496:	0a d0       	rcall	.+20     	; 0x4ac <__divmodhi4_neg1>
 498:	77 fd       	sbrc	r23, 7
 49a:	04 d0       	rcall	.+8      	; 0x4a4 <__divmodhi4_neg2>
 49c:	0c d0       	rcall	.+24     	; 0x4b6 <__udivmodhi4>
 49e:	06 d0       	rcall	.+12     	; 0x4ac <__divmodhi4_neg1>
 4a0:	00 20       	and	r0, r0
 4a2:	1a f4       	brpl	.+6      	; 0x4aa <__divmodhi4_exit>

000004a4 <__divmodhi4_neg2>:
 4a4:	70 95       	com	r23
 4a6:	61 95       	neg	r22
 4a8:	7f 4f       	sbci	r23, 0xFF	; 255

000004aa <__divmodhi4_exit>:
 4aa:	08 95       	ret

000004ac <__divmodhi4_neg1>:
 4ac:	f6 f7       	brtc	.-4      	; 0x4aa <__divmodhi4_exit>
 4ae:	90 95       	com	r25
 4b0:	81 95       	neg	r24
 4b2:	9f 4f       	sbci	r25, 0xFF	; 255
 4b4:	08 95       	ret

000004b6 <__udivmodhi4>:
 4b6:	aa 1b       	sub	r26, r26
 4b8:	bb 1b       	sub	r27, r27
 4ba:	51 e1       	ldi	r21, 0x11	; 17
 4bc:	07 c0       	rjmp	.+14     	; 0x4cc <__udivmodhi4_ep>

000004be <__udivmodhi4_loop>:
 4be:	aa 1f       	adc	r26, r26
 4c0:	bb 1f       	adc	r27, r27
 4c2:	a6 17       	cp	r26, r22
 4c4:	b7 07       	cpc	r27, r23
 4c6:	10 f0       	brcs	.+4      	; 0x4cc <__udivmodhi4_ep>
 4c8:	a6 1b       	sub	r26, r22
 4ca:	b7 0b       	sbc	r27, r23

000004cc <__udivmodhi4_ep>:
 4cc:	88 1f       	adc	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	5a 95       	dec	r21
 4d2:	a9 f7       	brne	.-22     	; 0x4be <__udivmodhi4_loop>
 4d4:	80 95       	com	r24
 4d6:	90 95       	com	r25
 4d8:	bc 01       	movw	r22, r24
 4da:	cd 01       	movw	r24, r26
 4dc:	08 95       	ret

000004de <itoa>:
 4de:	fb 01       	movw	r30, r22
 4e0:	9f 01       	movw	r18, r30
 4e2:	e8 94       	clt
 4e4:	42 30       	cpi	r20, 0x02	; 2
 4e6:	c4 f0       	brlt	.+48     	; 0x518 <itoa+0x3a>
 4e8:	45 32       	cpi	r20, 0x25	; 37
 4ea:	b4 f4       	brge	.+44     	; 0x518 <itoa+0x3a>
 4ec:	4a 30       	cpi	r20, 0x0A	; 10
 4ee:	29 f4       	brne	.+10     	; 0x4fa <itoa+0x1c>
 4f0:	97 fb       	bst	r25, 7
 4f2:	1e f4       	brtc	.+6      	; 0x4fa <itoa+0x1c>
 4f4:	90 95       	com	r25
 4f6:	81 95       	neg	r24
 4f8:	9f 4f       	sbci	r25, 0xFF	; 255
 4fa:	64 2f       	mov	r22, r20
 4fc:	77 27       	eor	r23, r23
 4fe:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__udivmodhi4>
 502:	80 5d       	subi	r24, 0xD0	; 208
 504:	8a 33       	cpi	r24, 0x3A	; 58
 506:	0c f0       	brlt	.+2      	; 0x50a <itoa+0x2c>
 508:	89 5d       	subi	r24, 0xD9	; 217
 50a:	81 93       	st	Z+, r24
 50c:	cb 01       	movw	r24, r22
 50e:	00 97       	sbiw	r24, 0x00	; 0
 510:	a1 f7       	brne	.-24     	; 0x4fa <itoa+0x1c>
 512:	16 f4       	brtc	.+4      	; 0x518 <itoa+0x3a>
 514:	5d e2       	ldi	r21, 0x2D	; 45
 516:	51 93       	st	Z+, r21
 518:	10 82       	st	Z, r1
 51a:	c9 01       	movw	r24, r18
 51c:	0c 94 90 02 	jmp	0x520	; 0x520 <strrev>

00000520 <strrev>:
 520:	dc 01       	movw	r26, r24
 522:	fc 01       	movw	r30, r24
 524:	67 2f       	mov	r22, r23
 526:	71 91       	ld	r23, Z+
 528:	77 23       	and	r23, r23
 52a:	e1 f7       	brne	.-8      	; 0x524 <strrev+0x4>
 52c:	32 97       	sbiw	r30, 0x02	; 2
 52e:	04 c0       	rjmp	.+8      	; 0x538 <strrev+0x18>
 530:	7c 91       	ld	r23, X
 532:	6d 93       	st	X+, r22
 534:	70 83       	st	Z, r23
 536:	62 91       	ld	r22, -Z
 538:	ae 17       	cp	r26, r30
 53a:	bf 07       	cpc	r27, r31
 53c:	c8 f3       	brcs	.-14     	; 0x530 <strrev+0x10>
 53e:	08 95       	ret

00000540 <_exit>:
 540:	f8 94       	cli

00000542 <__stop_program>:
 542:	ff cf       	rjmp	.-2      	; 0x542 <__stop_program>
